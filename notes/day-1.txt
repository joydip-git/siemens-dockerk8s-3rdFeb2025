java, C# app, node js etc....

challenges for app deployment:
------------------------------------------
dependencies (s/w, config files etc.) of the app
scale up
dev and prod en might be different
different projects and different dependencies  - install and uninstall

expected solution:
-------------------
1. same environment for dev and prod
2. if there is common app dev env/setup can be shared with the new member of the team
3. we don't want to repeatedly un/install 
4. dependencies are properly placed in every system where the app is running

solutions:
----------------
Viual Machines
	=> separate environments
	=> env specific files
	=> common env file can be shared among the VMs

cons 
	=> duplication of s/w dependencies in every VM
	=> since they are VMs they will have full fledge O/S
	=> boot up time is longer


Core of every O/S => Kernel [provides minimum APIs]

Containers:
--------------------------------------
a running piece of your s/w (app)

containerization: 
------------------------------
a standarized way to create a package containing information and instruction about
	-> what are the dependencies of the app to run
	-> O/S kernel which provides access to file system
	-> while the app is running how to access that file sytem from the app
	-> any config file required for the app
a standarized way to create a package [code of the app/sw and the dependencies of the app]

a containerization package produces the same container with the same app running in the exact same environment everywhere

Docker => 
	containerization technique
	tool to create and manage the containers

blueprint => Image

file => set of instructions about code and its dependencies => [docker] => image => container

Image
	=> template/blueprint for containers
	=> contains code + required tools/runtim/files (dependencies)
	=> layer-based and read-only
	=> images do not contain data

hypervisor:
------------------
a s/w which is used to manage VMs.
VMM => VM monitor

1. resource allocation
2. isolation
3. virtualization

types: 
	Type-1: a bare-minimum/metal hypervisor seating at the the top of host o/s
		Hyper-V
	Type-2: a full-fledge s/w (app) which is installed in the actual machine
		ex: VirtualBox, VMware


WSL => Windows Sub-system for Linux

linux os flavors:
	Ubuntu
	Debian
	......

FROM: Set the baseImage to use for subsequent instructions. FROM must be the first instruction in a Dockerfile

FROM node:alpine

Set the working directory for any subsequent ADD, COPY, CMD, ENTRYPOINT, or RUN instructions that follow it in the Dockerfile.
WORKDIR /app

COPY . /app

CMD [ "node","app.js" ]

./app>node app.js

docker image build command:
Aliases:
  docker build, docker builder build, docker image build, docker buildx b
-------------------------------------------------------------------------------
first-app> docker build -t first-app-image:1.0.0 .

inspect an image:
-----------------------------
>docker image inspect first-app-image:1.0.0

print the list of images:
-------------------------
>docker image ls

remove the list of images:
-------------------------
>docker image rm image1, image2, ....

create and run a container:
-----------------------------
>docker run <image-name>:<tag-name>

check currently running containers: [aliases: docker container ls, docker container list, docker container ps, docker ps]
--------------------------------------------
>docker ps

check all containers (runing and/or stoped):
-------------------------------------------------
>docker ps -a [ps -> processes, a -> all]

remove containers [ aliases: docker container rm, docker container remove]
-----------------------------------------------------------------------------
>docker rm <container-name>

Note: remove the container when it is stopped
---------------------------------------------------
>docker run --rm --name api-cont-1 api-image:1.0.

stop the container
-----------------------
>docker stop <container-name/id> (does not remove the container)

o/p: hello docker

start an existing container:
----------------------------------------
>docker start <cotainer-name> [** it will start by default in detatched mode (will not block the terminal to log)]

>docker start -a <cotainer-name> [** it will start in attatched mode (will block the terminal to log)]

run the container in detatched mode:
----------------------------------------
>docker run -d --name first-app-cont-1 first-app-image:1.0.0

o/p: b453ac9dd5f8e8c009911dc67e1ea710e018cc9c70846e0cd1e2a8adbeb64b78 (cont-id)

print the logs (if the container is running in detached mode) of the container:
-----------------------------------------------------------------------------
docker logs <container-name/id>
Note: the "logs" command attaches the container with the terminal (the container will be in attached mode to display the logs. once the logs are displayed it will be back to detached mode)

bring the container back to attached mode, if its running in detatched mode:
--------------------------------------------------------------------------------
>docker logs -f <container-name/id> [it will print the old logs of the app in the container and will follow the furure logs, i.e., the container will be blocking the terminal -> attached mode]


dotnet/java
	
	FROM <image-dotnet tool> as compilation
	=> source code compilation [need dotnet tool for comilation]

	workdir
	copy
	cmd["dotnet build","..."]


	FROM <image-dotnet runtime> as production
	copy from compilation
	=> run the compiled code [need dotnet runtime to runtime]



app:
	runtime => nodejs
	other libraries: dotenv, express, body-parser


docker container running an app which wants to expose a port
------------------------------------------------------------------
docker run -d --port 3000:3001 --name api-cont-1 api-image:1.0.0

persisting and reading data in docker containerized app:
-----------------------------------------------------------------------------
1. container layer:  
every container comes up with a read-write enabled thin layer of file system, which persists over container shutdown. so, when the next time same container is run you can have the data back.
but, when the container is removed the data is lost.

2. volumes: 
	are managed by docker
	view all volumes: >docker volume ls
	remove all volumes:
		one by one: >docker volume rm <vol-name/id>
		all: >docker volume prune

a. anonymous volume:
	>docker run -d -p 3000:3001 --name <con-name> -v <file-path> <image-name>

this type are anonymous as there is no name, just an id
when the container is removed and again new container is created and run, again new anonymous volumes will be created, NOT the old ones, used in the last run.

Note: anonymous volumes will be automatically removed when the container is stopped, if the container is run with "--rm" command (which removes the container when stopped)

>docker run --rm -d -p 3000:3001 --name api-cont-1 -v /app/feedback -v /app/temp  api-image:1.0.0

